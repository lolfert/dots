export declare type Parameters = [string, string];
export declare type FunctionInfo = {
    parameters: Parameters[];
    method: boolean;
    return_type: string;
    name: string;
    since: number;
};
export declare type UiEventInfo = {
    parameters: Parameters[];
    name: string;
    since: number;
};
export declare type ApiInfo = {
    version: {
        major: number;
        minor: number;
        patch: number;
        api_level: number;
        api_compatible: number;
        api_prerelease: number;
    };
    functions: FunctionInfo[];
    ui_events: UiEventInfo[];
    ui_options: string[];
    error_types: object;
    types: object;
};
export declare type VimValue = number | boolean | string | number[] | {
    [key: string]: any;
};
export interface Logger {
    trace(message: any, ...args: any[]): void;
    debug(message: any, ...args: any[]): void;
    info(message: any, ...args: any[]): void;
    warn(message: any, ...args: any[]): void;
    error(message: any, ...args: any[]): void;
    mark(message: any, ...args: any[]): void;
}
